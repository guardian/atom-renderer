// @flow

import { Actions, ComponentTypes } from 'lib/ophan';
import { fromEvent } from 'lib/events';
import type { Channel } from 'channels';

type QuestionId = string;
type QuestionText = string;
type Question = [?QuestionId, ?QuestionText];

type StoryQuestionsF = {
  questions: HTMLElement,
  views: HTMLElement[],
  form: HTMLFormElement
};

type StoryQuestions = StoryQuestionsF & Atom;

export default ({
  ophan,
  dom,
  viewport
}: Services): AtomBuilder<StoryQuestionsF> => (
  root: HTMLElement
): Coeval<StoryQuestions> => {
  let voteC: Channel<Question>;
  let subscribeC: Channel<Event>;
  let observer: (x: number) => void;

  const start = (s: StoryQuestions): Promise<void> => {
    const updateFn = onUpdateView(s, 0);
    voteC = fromEvent('click', s.questions)
      .map(
        (e: Event) =>
          ((e.target: any).closest('.js-question'): ?HTMLButtonElement)
      )
      .filter((e: ?HTMLButtonElement) => !!e)
      .map(
        (e: ?HTMLButtonElement) =>
          e && [
            e.getAttribute('data-question-id'),
            e.getAttribute('data-question-text')
          ]
      )
      .takeN(1);

    voteC.tap((q: Question) => {
      onVote(s)(q);
      updateFn();
      subscribeC.tap((e: Event) => {
        onSubmit(s, q, new FormData(s.form));
        updateFn();
      });
    });

    subscribeC = fromEvent('submit', s.form, { preventDefault: true }).takeN(1);

    observer = onVisible(s);
    viewport.observe(root, 1, observer);

    return Promise.resolve();
  };

  const stop = () => {
    voteC.close();
    subscribeC.close();
    viewport.unobserve(observer);
  };

  const onVote = (s: StoryQuestions) => (q: Question): void => {
    record(s.atomId, Actions.VOTE, q[0], q[1]);
  };

  const onSubmit = (s: StoryQuestions, q: Question, d: FormData): void => {
    record(s.atomId, Actions.SUBSCRIBE, q[0], q[1]);
    const req = new XMLHttpRequest();
    req.withCredentials = true;
    req.open('POST', s.form.action);
    req.send(d);
  };

  const onUpdateView = (s: StoryQuestions, i: number) => (): void => {
    dom.write(() => {
      s.views[i].hidden = true;
      i += 1;
      s.views[i].hidden = false;
    });
  };

  const onVisible = (s: StoryQuestions) => (ratio: number): void => {
    if (ratio >= 1) {
      record(s.atomId, Actions.VIEW);
      viewport.unobserve(root, 1, observer);
    }
  };

  const record = (
    id: string,
    action: Action,
    optId: ?string,
    optValue: ?string
  ) => {
    const options = {};
    if (optId) options.id = optId;
    if (optValue) options.value = optValue;

    ophan.record({
      componentEvent: {
        component: {
          componentType: ComponentTypes.READERS_QUESTIONS_ATOM,
          id,
          products: [],
          labels: []
        },
        action,
        ...options
      }
    });
  };

  const runTry = (): Try<StoryQuestions> => {
    const atomId = root.getAttribute('data-atom-id');
    const views = Array.from(root.querySelectorAll('.atom__view'));
    const questions = (root.querySelector('.js-questions'): ?HTMLElement);
    const form = (document.getElementById(
      'js-atom--readerquestions__subscribe'
    ): ?HTMLFormElement);

    return atomId && views && questions && form
      ? Object.freeze({
          atomId,
          views,
          questions,
          form,
          stop,
          start(): Promise<void> {
            return start(this);
          }
        })
      : 'Some elements were missing when initialising atom';
  };

  return Object.freeze({ runTry });
};
