//@flow
import type { Action, Services, Coeval, ComponentType, Try } from './typedefs'
import { Actions } from './typedefs';

import type { Channel } from './channels';
import { fromEvent } from './events';

type Atom = { atomId: string
            , start: (a: Atom) => Promise<void>
            , stop: () => void
            };

type Snippet = { snippetId: string
               , snippetType: string
               , header: HTMLElement
               , question: HTMLElement
               , ack: HTMLElement
               } & Atom;

export default (componentType: ComponentType) => ({ ophan, dom, viewport }: Services) => (root: Element): Coeval<Snippet> => {
  let feedbackC: Channel<Action>;
  let expandC: Channel<Action>;
  let observer: (x: number) => void;

  const start = (a: Snippet): Promise<void> => {
    feedbackC = fromEvent('click', a.question)
      .map((e: Event) => ((e.target: any).closest('.atom__button'): ?HTMLButtonElement))
      .filter((e: ?HTMLButtonElement) => !!e)
      .map((e: ?HTMLButtonElement) => e && e.value === 'like' ? Actions.LIKE : Actions.DISLIKE)
      .takeN(1);
    feedbackC.tap(onFeedback(a));

    expandC = fromEvent('click', a.header)
      .map(_ => Actions.EXPAND)
      .takeN(1);
    expandC.tap(onExpand(a));

    observer = onVisible(a);
    viewport.observe(root, 1, observer);

    return Promise.resolve();
  };
  
  const stop = () => {
    feedbackC.close();
    expandC.close();
    viewport.unobserve(root, 1, observer);
  };
  
  const onFeedback = (p: Snippet) => (a: Action): void => {
    record(p.snippetId, a);
    dom.write(() => {
      p.ack.hidden = false;
      p.question.hidden = true;
    });
  }

  const onExpand = (p: Snippet) => (a: Action): void => {
    record(p.snippetId, a);
  }

  const onVisible = (p: Snippet) => (ratio: number): void => {
    if (ratio >= 1) {
      record(p.snippetId, Actions.VIEW);
      viewport.unobserve(root, 1, observer);
    }
  }

  const record = (id: string, action: Action) => {
    ophan.record({
      componentEvent: {
        component: {
          componentType,
          id,
          products: [],
          labels: []
        },
        action
      }
    });
  }
  
  const runTry = (): Try<Snippet> => {
    const header = (root.querySelector('.atom--snippet__header'): ?HTMLElement);
    const question = (root.querySelector('.atom--snippet__feedback'): ?HTMLElement);
    const ack = (root.querySelector('.atom--snippet__ack'): ?HTMLElement);
    const snippet = (root.querySelector('.atom--snippet'): ?HTMLElement);

    return header && question && ack && snippet
      ? Object.freeze({
        atomId: root.id,
        snippetId: (snippet.dataset.snippetId: string),
        snippetType: (snippet.dataset.snippetType: string),
        header,
        question,
        ack,
        stop,
        start(): Promise<void> {
          return start(this);
        }
      })
      : 'Some elements were missing when initialising atom';
  }

  return Object.freeze({ runTry });
}