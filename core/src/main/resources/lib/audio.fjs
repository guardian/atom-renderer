//@flow

import { Actions } from 'ophan';
import type { Channel } from 'channels';
import { fromEvent } from 'events-getter';

type AudioF = { audioId: string
                , player: HTMLElement
                , playPauseButton: HTMLElement
                , timePlayed: HTMLElement
                , timeDuration: HTMLElement
                , scrubber: HTMLElement
                };
type Audio = AudioF & Atom;

function formatTime(t: number): string {
  const format = (t: number) => t.toFixed(0).padStart(2, '0');
  const second = Math.floor(t % 60);
  const minute = Math.floor((t % 3600) / 60);
  const hour = Math.floor(t / 3600);
  return `${format(hour)}:${format(minute)}:${format(second)}`;
}

export default (componentType: ComponentType) => ({ ophan, dom, viewport }: Services): AtomBuilder<AudioF> => (root: HTMLElement): Coeval<Audio> => {
  let playPauseC: Channel<Action>;
  let scrubC: Channel<Action>;
  let playerTimeUpdateC: Channel<Action>;
  let observer: (x: number) => void;
  let audioContainerSelector = '.atom--audio';
  let audioPlayerSelector = '.atom--audio__player-element';
  let playPauseButtonSelector = '.atom--audio__button-playaudio';
  let progressBarSelector = '.atom--audio__progress-bar';
  let progressSlider = '.atom--audio__progress-bar > input';
  let timePlayedSelector = '.atom--audio__time-played > span';
  let timeDurationSelector = '.atom--audio__time-duration > span';

  const start = (a: Audio): Promise<void> => {
    playPauseC = fromEvent('click', a.playPauseButton)
      .map((e: Event) => ((e.target: any).closest(playPauseButtonSelector): ?HTMLButtonElement))
      .filter((e: ?HTMLButtonElement) => !!e);
    playPauseC.tap(onPlayPause(a));

    playerTimeUpdateC = fromEvent('timeupdate', a.player)
      .map((e: Event) => ((e.target: any).closest(audioPlayerSelector): ?HTMLElement))
      .filter((e: ?HTMLElement) => !!e);
    playerTimeUpdateC.tap(onTick(a));

    observer = onVisible(a);
    viewport.observe(root, 1, observer);

    return Promise.resolve();
  };
  
  const stop = () => {
    playPauseC.close();
    scrubC.close();
    viewport.unobserve(root, 1, observer);
  };

  const recordOphanAudioEvent = (id: string, eventName: string) => {
    ophan.record({
      audio: {
        id,
        eventType: `audio:content:${eventName}`,
      },
    });
  };

  const setPlayingState = (playPauseButton: HTMLElement) => {
    dom.write(() => {
      playPauseButton.classList.add('is-playing');
    });
  };

  const setPausedState = (playPauseButton: HTMLElement) => {
    dom.write(() => {
      playPauseButton.classList.remove('is-playing');
    });
  };

  const setupTime = (audio: Audio) => {
    dom.write(() => {
      audio.scrubber.value = 0;
      audio.timePlayed.innerText = formatTime(0);
      audio.timeDuration.innerText = formatTime(Number(audio.player.getAttribute('data-duration')) || 0);
      audio.player.setAttribute('milestones', 'READY');
    });
  };

  const updateTime = (audio: Audio) => {
    const now = Date.now();
    const last = audio.player.getAttribute('last-tick');

    // throttle to 1 update per second
    if (now - (Number(last) || 0) < 1000) return;

    const played = Math.floor(audio.player.currentTime);
    const duration = Number(audio.player.getAttribute('data-duration')) || 1; // avoid divide by zero if not present
    const percentPlayed = Math.floor(played / duration * 100);
    const gradientDescription = `linear-gradient(to right, #C70000 ${percentPlayed}%, #afafaf ${percentPlayed}%)`;
    const milestones = audio.player.getAttribute('milestones');

    switch (percentPlayed){
      case 25: if (milestones.lastIndexOf('25%') < 0) {
          audio.player.setAttribute('milestones', milestones.concat(',25%'));
          recordOphanAudioEvent(audio.player.getAttribute('data-media-id'), Actions.PERCENT25);
        }
        break;
      case 50: if (milestones.lastIndexOf('50%') < 0) {
          audio.player.setAttribute('milestones', milestones.concat(',50%'));
          recordOphanAudioEvent(audio.player.getAttribute('data-media-id'), Actions.PERCENT50);
        }
        break;
      case 75: if (milestones.lastIndexOf('75%') < 0) {
          audio.player.setAttribute('milestones', milestones.concat(',75%'));
          recordOphanAudioEvent(audio.player.getAttribute('data-media-id'), Actions.PERCENT75);
        }
        break;
      case 100: if (milestones.lastIndexOf('THE_END') < 0) {
          audio.player.setAttribute('milestones', milestones.concat(',THE_END'));
          recordOphanAudioEvent(audio.player.getAttribute('data-media-id'), Actions.THE_END);
        }
    }

    dom.write(() => {
      audio.scrubber.value = percentPlayed;
      audio.player.setAttribute('last-tick', now.toString());
      audio.scrubber.style.background = gradientDescription;
      audio.timePlayed.innerText = formatTime(played);
    });
  };

  const onPlayPause = (p: Audio) => (a: Action): void => {
    if (p.player.paused) {
      setPlayingState(p.playPauseButton);
      recordOphanAudioEvent(p.player.getAttribute('data-media-id'), Actions.PLAY);
      p.player.play();
      p.player.ontimeupdate = updateTime(p);
    } else {
      setPausedState(p.playPauseButton);
      recordOphanAudioEvent(p.player.getAttribute('data-media-id'), Actions.PAUSE);
      p.player.pause();
    }
  };

  const onTick = (p: Audio) => (a: Action): void => {
    updateTime(p);
  };

  const onVisible = (p: Audio) => (ratio: number): void => {
    if (ratio >= 1) {
      recordOphanAudioEvent(p.player.getAttribute('data-media-id'), Actions.READY);
      setupTime(p);
      viewport.unobserve(root, 1, observer);
    }
  };

  const runTry = (): Try<Audio> => {
    const playPauseButton = (root.querySelector(playPauseButtonSelector): ?HTMLElement);
    const scrubber = (root.querySelector(progressSlider): ?HTMLElement);
    const audio = (root.querySelector(audioContainerSelector): ?HTMLElement);
    const player = (root.querySelector(audioPlayerSelector): ?HTMLElement);
    const timePlayed = (root.querySelector(timePlayedSelector): ?HTMLElement);
    const timeDuration = (root.querySelector(timeDurationSelector): ?HTMLElement);

    return audio && player && playPauseButton && timePlayed && scrubber
      ? Object.freeze({
        atomId: (root.dataset.atomId: string),
        player: player,
        playPauseButton,
        timePlayed,
        timeDuration,
        scrubber,
        stop,
        start(): Promise<void> {
          return start(this);
        }
      })
      : 'Some elements were missing when initialising atom';
  };

  return Object.freeze({ runTry });
}