//@flow

import { Actions } from 'ophan';
import type { Channel } from 'channels';
import { fromEvent } from 'events-getter';

type AudioF = { audioId: string
                , player: HTMLElement
                , audioType: String
                , playPauseButton: HTMLElement
                , timePlayed: HTMLElement
                , timeDuration: HTMLElement
                , scrubber: HTMLElement
                };
type Audio = AudioF & Atom;

function setPlayingState(dom: DomService, playPauseButton: HTMLElement) {
  dom.write(() => {
    playPauseButton.classList.add('is-playing');
  });
}

function setPausedState(dom: DomService, playPauseButton: HTMLElement) {
  console.log('PAUSED!');
  dom.write(() => {
    playPauseButton.classList.remove(['is-playing']);
  });
}

function formatTime(t: number): string {
  const format = (t: number) => t.toFixed(0).padStart(2, '0');
  const second = Math.floor(t % 60);
  const minute = Math.floor((t % 3600) / 60);
  const hour = Math.floor(t / 3600);
  return `${format(hour)}:${format(minute)}:${format(second)}`;
}

function setupTime(dom: DomService, audio: Audio) {
  dom.write(() => {
    audio.scrubber.value = 0;
    audio.timePlayed.innerText = formatTime(0);
    audio.timeDuration.innerText = formatTime(audio.player.duration);
  });
}

function updateTime(dom: DomService, audio: Audio) {
  // TODO: Throttling
  const played = Math.floor(audio.player.currentTime);
  dom.write(() => {
    audio.scrubber.value = played;
    audio.timePlayed.innerText = formatTime(played);
  });
}

export default (componentType: ComponentType) => ({ ophan, dom, viewport }: Services): AtomBuilder<AudioF> => (root: HTMLElement): Coeval<Audio> => {
  let playPauseC: Channel<Action>;
  let scrubC: Channel<Action>;
  let playerTimeUpdateC: Channel<Action>;
  let observer: (x: number) => void;
  let audioContainerSelector = '.atom--audio';
  let audioPlayerSelector = '.atom--audio__player-element';
  let playPauseButtonSelector = '.atom--audio__button-playaudio';
  let scrubberSelector = '.atom--audio__progress-bar';
  let progressSlider = '.atom--audio__progress-bar > input';
  let timePlayedSelector = '.atom--audio__time-played > span';
  let timeDurationSelector = '.atom--audio__time-duration > span';

  const start = (a: Audio): Promise<void> => {
    playPauseC = fromEvent('click', a.playPauseButton)
      .map((e: Event) => ((e.target: any).closest(playPauseButtonSelector): ?HTMLButtonElement))
      .filter((e: ?HTMLButtonElement) => !!e);
    playPauseC.tap(onPlayPause(a));

    //TODO: Do we have to capture scrub events?
    scrubC = fromEvent('click', a.scrubber)
      .map((e: Event) => ((e.target: any).closest(scrubberSelector): ?HTMLElement))
      .filter((e: ?HTMLElement) => !!e);
    scrubC.tap(onScrub(a));

    playerTimeUpdateC = fromEvent('timeupdate', a.player)
      .map((e: Event) => ((e.target: any).closest(audioPlayerSelector): ?HTMLElement))
      .filter((e: ?HTMLElement) => !!e);
    playerTimeUpdateC.tap(onTick(a));

    observer = onVisible(a);
    viewport.observe(root, 1, observer);

    return Promise.resolve();
  };
  
  const stop = () => {
    playPauseC.close();
    scrubC.close();
    viewport.unobserve(root, 1, observer);
  };

  const onPlayPause = (p: Audio) => (a: Action): void => {
    record(p.audioId, a);
    if (p.player.paused) {
      setPlayingState(dom, p.playPauseButton);
      p.player.play();
      p.player.ontimeupdate = updateTime(dom, p);
    } else {
      setPausedState(dom, p.playPauseButton);
      p.player.pause();
    }
  };

  const onScrub = (p: Audio) => (a: Action): void => {
    record(p.audioId, a);
    // presumably this should send an event to the audio player to skip in the direction of mouse travel?
  };

  const onTick = (p: Audio) => (a: Action): void => {
    updateTime(dom, p);
  };

  const onVisible = (p: Audio) => (ratio: number): void => {
    if (ratio >= 1) {
      record(p.audioId, Actions.VIEW);
      setupTime(dom, p);
      viewport.unobserve(root, 1, observer);
    }
  };

  const record = (id: string, action: Action) => {
    ophan.record({
      componentEvent: {
        component: {
          componentType,
          id,
          products: [],
          labels: []
        },
        action
      }
    });
  };
  
  const runTry = (): Try<Audio> => {
    const playPauseButton = (root.querySelector(playPauseButtonSelector): ?HTMLElement);
    const scrubber = (root.querySelector(progressSlider): ?HTMLElement);
    const audio = (root.querySelector(audioContainerSelector): ?HTMLElement);
    const player = (root.querySelector(audioPlayerSelector): ?HTMLElement);
    const timePlayed = (root.querySelector(timePlayedSelector): ?HTMLElement);
    const timeDuration = (root.querySelector(timeDurationSelector): ?HTMLElement);

    return audio && player && playPauseButton && timePlayed && scrubber
      ? Object.freeze({
        atomId: (root.dataset.atomId: string),
        audioId: (root.dataset.atomId: string),  //TODO: Where should this come from? Should it even be here?
        player: player,
        audioType: (root.dataset.audioType: string),  //TODO: Not currently available. Do we need it?
        playPauseButton,
        timePlayed,
        timeDuration,
        scrubber,
        stop,
        start(): Promise<void> {
          return start(this);
        }
      })
      : 'Some elements were missing when initialising atom';
  };

  return Object.freeze({ runTry });
}