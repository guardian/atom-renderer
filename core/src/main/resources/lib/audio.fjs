//@flow

import { Actions } from 'ophan';

type AudioF = { audioId: string
                , player: HTMLElement
                , playPauseButton: HTMLElement
                , timePlayed: HTMLElement
                , timeDuration: HTMLElement
                , scrubber: HTMLElement
                };
type Audio = AudioF & Atom;

function formatTime(t: number): string {
  const format = (t: number) => t.toFixed(0).padStart(2, '0');
  const second = Math.floor(t % 60);
  const minute = Math.floor((t % 3600) / 60);
  const hour = Math.floor(t / 3600);
  return `${format(hour)}:${format(minute)}:${format(second)}`;
}

export default (componentType: ComponentType) => ({ ophan, dom, viewport }: Services): AtomBuilder<AudioF> => (root: HTMLElement): Coeval<Audio> => {
  let observer: (x: number) => void;
  const audioContainerSelector = '.atom--audio';
  const audioPlayerSelector = '.atom--audio__player-element';
  const playPauseButtonSelector = '.atom--audio__button-playaudio';
  const progressSliderSelector = '.atom--audio__progress-bar > input';
  const timePlayedSelector = '.atom--audio__time-played > span';
  const timeDurationSelector = '.atom--audio__time-duration > span';

  const start = (a: Audio): Promise<void> => {
    /*
      Safari 11+ doesn't recognise our handling of a click event intercepted over a Channel and therefore
      refuses to start playback in response, so we'll use the default addEventListener technique instead
    */
    a.playPauseButton.addEventListener('click', onPlayPause(a));
    a.scrubber.addEventListener('input', onTimeSeek(a));
    a.scrubber.addEventListener('change', onTimeSeek(a));
    a.player.addEventListener('timeupdate', updateTime(a));
    a.player.addEventListener('ended', onPlaybackFinished(a));

    observer = onVisible(a);
    viewport.observe(root, 1, observer);

    return Promise.resolve();
  };
  
  const stop = () => {
    viewport.unobserve(root, 1, observer);
  };

  const recordOphanAudioEvent = (id: string, eventName: string) => {
    ophan.record({
      audio: {
        id,
        eventType: `audio:content:${eventName}`,
      },
    });
  };

  const setPlayingState = (playPauseButton: HTMLElement) => {
    dom.write(() => {
      playPauseButton.classList.add('is-playing');
    });
  };

  const setPausedState = (playPauseButton: HTMLElement) => {
    dom.write(() => {
      playPauseButton.classList.remove('is-playing');
    });
  };

  const setupTime = (audio: Audio) => {
    dom.write(() => {
      audio.scrubber.value = 0;
      audio.timePlayed.innerText = formatTime(0);
      audio.timeDuration.innerText = formatTime(Number(audio.player.getAttribute('data-duration')) || 0);
    });
  };

  const showProgress = (audio: Audio, percentPlayed: Number, now: Number, played: string) => {
    const gradientDescription = `linear-gradient(to right, #C70000 ${percentPlayed}%, #afafaf ${percentPlayed}%)`;

    dom.write(() => {
      audio.scrubber.value = percentPlayed;
      audio.player.setAttribute('data-last-tick', now.toString());
      audio.scrubber.style.background = gradientDescription;
      audio.timePlayed.innerText = formatTime(played);
    });
  };

  const updateTime = (p: Audio) => (): void => {
    const now = Date.now();
    const last = p.player.getAttribute('data-last-tick');

    // throttle to 1 update per second
    if (now - (Number(last) || 0) < 1000) return;

    const played = Math.floor(p.player.currentTime);
    const duration = Number(p.player.getAttribute('data-duration')) || 1; // avoid divide by zero if not present
    const percentPlayed = Math.floor(played / duration * 100);
    const milestones = p.player.getAttribute('data-milestones') || '';

    if (percentPlayed >= 25 && milestones.indexOf(Actions.PERCENT25) < 0){
      p.player.setAttribute('data-milestones', milestones.concat(`${Actions.PERCENT25},`));
      recordOphanAudioEvent(p.player.getAttribute('data-media-id'), Actions.PERCENT25);
    }
    if (percentPlayed >= 50 && milestones.indexOf(Actions.PERCENT50) < 0){
      p.player.setAttribute('data-milestones', milestones.concat(`${Actions.PERCENT50},`));
      recordOphanAudioEvent(p.player.getAttribute('data-media-id'), Actions.PERCENT50);
    }
    if (percentPlayed >= 75 && milestones.indexOf(Actions.PERCENT75) < 0){
      p.player.setAttribute('data-milestones', milestones.concat(`${Actions.PERCENT75},`));
      recordOphanAudioEvent(p.player.getAttribute('data-media-id'), Actions.PERCENT75);
    }

    showProgress(p, percentPlayed, now, played);

  };

  const onPlayPause = (p: Audio) => (): void => {
    if (p.player.paused) {
      const milestones = p.player.getAttribute('data-milestones') || '';
      if (milestones.indexOf(Actions.PLAY) < 0 ) {
        p.player.setAttribute('data-milestones', milestones.concat(`${Actions.PLAY},`));
        recordOphanAudioEvent(p.player.getAttribute('data-media-id'), Actions.PLAY);
      }
      setPlayingState(p.playPauseButton);
      p.player.play();
    } else {
      setPausedState(p.playPauseButton);
      p.player.pause();
    }
  };

  const onVisible = (p: Audio) => (ratio: number): void => {
    if (ratio >= 1) {
      recordOphanAudioEvent(p.player.getAttribute('data-media-id'), Actions.VIEW);
      setupTime(p);
      viewport.unobserve(root, 1, observer);
    }
  };

  const onTimeSeek = (p: Audio) => (): void => {
    const percentSought = Number(p.scrubber.value) || 0;
    const duration = Number(p.player.getAttribute('data-duration'));
    const played = Math.floor(duration * percentSought / 100);
    const now = Date.now();
    p.player.currentTime = played;
    showProgress(p, percentSought, now, played);
  };

  const onPlaybackFinished = (p: Audio) => (): void => {
    const percentReached = 100;
    const duration = Number(p.player.getAttribute('data-duration'));
    const now = Date.now();
    const milestones = p.player.getAttribute('data-milestones') || '';
    if (milestones.indexOf(Actions.THE_END) < 0 ) {
      recordOphanAudioEvent(p.player.getAttribute('data-media-id'), Actions.THE_END);
      p.player.setAttribute('data-milestones', milestones.concat(`${Actions.THE_END},`));
    }
    p.player.currentTime = duration;
    setPausedState(p.playPauseButton);
    showProgress(p, percentReached, now, duration);
  };

  const runTry = (): Try<Audio> => {
    const playPauseButton = (root.querySelector(playPauseButtonSelector): ?HTMLElement);
    const scrubber = (root.querySelector(progressSliderSelector): ?HTMLElement);
    const audio = (root.querySelector(audioContainerSelector): ?HTMLElement);
    const player = (root.querySelector(audioPlayerSelector): ?HTMLElement);
    const timePlayed = (root.querySelector(timePlayedSelector): ?HTMLElement);
    const timeDuration = (root.querySelector(timeDurationSelector): ?HTMLElement);

    return audio && player && playPauseButton && timePlayed && scrubber
      ? Object.freeze({
        atomId: (root.dataset.atomId: string),
        player: player,
        playPauseButton,
        timePlayed,
        timeDuration,
        scrubber,
        stop,
        start(): Promise<void> {
          return start(this);
        }
      })
      : 'Some elements were missing when initialising atom';
  };

  return Object.freeze({ runTry });
}